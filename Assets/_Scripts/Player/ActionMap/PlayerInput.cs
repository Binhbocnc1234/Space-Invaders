//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/_Scripts/Player/ActionMap/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player_Move"",
            ""id"": ""32dafb75-0cdd-47b5-88ea-0f0f18b3cdc3"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Value"",
                    ""id"": ""63ec5ca0-63a2-46f6-9b8c-7991699fb4d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e96ec4d1-bfd8-42e8-9335-967209e13ff3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2c555a84-31c2-46ca-b7c3-1263789f3351"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bfaf9ed2-672a-41b4-9163-ad87f45cac6c"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f2871d2b-b743-435c-b8c5-6e6256526c19"",
                    ""path"": ""<Mouse>/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2de8494c-a2f5-40b7-8dc9-53f46a639582"",
                    ""path"": ""<Mouse>/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Drag"",
            ""id"": ""54e7d73a-4940-47c6-8eb3-3afd0850e0c8"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""d926512d-e32c-499a-8697-69276fe1cec4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""153808c2-34f0-4c2f-b590-13a923578c45"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Move
        m_Player_Move = asset.FindActionMap("Player_Move", throwIfNotFound: true);
        m_Player_Move_Drag = m_Player_Move.FindAction("Drag", throwIfNotFound: true);
        // Drag
        m_Drag = asset.FindActionMap("Drag", throwIfNotFound: true);
        m_Drag_Drag = m_Drag.FindAction("Drag", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Move
    private readonly InputActionMap m_Player_Move;
    private List<IPlayer_MoveActions> m_Player_MoveActionsCallbackInterfaces = new List<IPlayer_MoveActions>();
    private readonly InputAction m_Player_Move_Drag;
    public struct Player_MoveActions
    {
        private @PlayerInput m_Wrapper;
        public Player_MoveActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drag => m_Wrapper.m_Player_Move_Drag;
        public InputActionMap Get() { return m_Wrapper.m_Player_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_MoveActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_MoveActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_MoveActionsCallbackInterfaces.Add(instance);
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
        }

        private void UnregisterCallbacks(IPlayer_MoveActions instance)
        {
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
        }

        public void RemoveCallbacks(IPlayer_MoveActions instance)
        {
            if (m_Wrapper.m_Player_MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_MoveActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_MoveActions @Player_Move => new Player_MoveActions(this);

    // Drag
    private readonly InputActionMap m_Drag;
    private List<IDragActions> m_DragActionsCallbackInterfaces = new List<IDragActions>();
    private readonly InputAction m_Drag_Drag;
    public struct DragActions
    {
        private @PlayerInput m_Wrapper;
        public DragActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drag => m_Wrapper.m_Drag_Drag;
        public InputActionMap Get() { return m_Wrapper.m_Drag; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DragActions set) { return set.Get(); }
        public void AddCallbacks(IDragActions instance)
        {
            if (instance == null || m_Wrapper.m_DragActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DragActionsCallbackInterfaces.Add(instance);
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
        }

        private void UnregisterCallbacks(IDragActions instance)
        {
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
        }

        public void RemoveCallbacks(IDragActions instance)
        {
            if (m_Wrapper.m_DragActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDragActions instance)
        {
            foreach (var item in m_Wrapper.m_DragActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DragActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DragActions @Drag => new DragActions(this);
    public interface IPlayer_MoveActions
    {
        void OnDrag(InputAction.CallbackContext context);
    }
    public interface IDragActions
    {
        void OnDrag(InputAction.CallbackContext context);
    }
}
